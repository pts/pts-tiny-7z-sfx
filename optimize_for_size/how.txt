by pts@fazekas.hu at Tue Jan 31 11:15:10 CET 2017

int64 arithmetic: __udivdi3 __umoddi3
system calls: (errno) chmod fchmod utimes gettimeofday umask symlink unlink lstat mkdir
dynamic memory: free malloc
stdio.h messages: putchar (fputc) fputs stdout
stdio.h reading files: open read lseek close
stdio.h writing files: open write close

Ideas to reduce file size:

* use GCC 4.8 or later, it has better -Os support
* use pts-xtiny, implement dynamic memory and stdio.h first
* try some more command-line flags for gcc
* use 64-bit system calls (e.g. for lstat) if needed
* all system calls are available in pts-xtiny
* DONE: memcmp is used only for k7zSignature, try to eliminate or inline it
* DONE: strcmp is used only for argv parsing, try to eliminate or inline it
* add output buffering for stdout (stdio.h messages)
* DONE: eliminate __divdi3 (use __udivdi3 instead) by converting signed
  divisions to unsinged
* do we really need __udivdi3 and __umoddi3, can't we do without them? (There is / 10 somewhere.)
* DONE: fwrite() is called only once per file, use write(2) instead
* DONE: use read() instead of fread() for reading: the file reading pattern is
  already buffered well enough: LookToRead_Look_Exact reads 16 kB most of
  the time (large enough buffer)
* DONE: FileInStream_CreateVTable can be eliminated
* Once we use SZ_SEEK_SET only, we can eliminate ftell, use lseek, and fail
  if seeking wasn't possible.
* malloc()+free() is used in a predictable way, only 1 malloc/free pair per
  file (probably the filename); we can optimize it by making free() a no-op
  execpt if it's free()ing the last malloc().
  See malloc.log malloc_perfile.log malloc_perfile2.log
  input .7z file size: 10887666 bytes
  big malloc()s: 100192, 466238, 521688, 21810108, 26192641
  The malloc(21810108) happens after the free() of 26192641. Can we optimize it?
  How much is the memory usage, who do we need the big malloc for?
  How does it change if we duplicate all files twice in the .7z?
* DONE: Loop in LookInStream_Read2 many not be needed.
* Use the lseek64 library call (or _llseek system call) for 64-bit seeks in
  the archive. minidiet doesn't support this, xtiny can.
* Eliminate multiple calls to Utf16_To_Char in 7zMain.c.
* Reuse the output buffer for Utf16_To_Char.

__END__
