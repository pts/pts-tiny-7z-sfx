by pts@fazekas.hu at Tue Jan 31 11:15:10 CET 2017

system calls: (errno) chmod fchmod utimes gettimeofday umask symlink unlink mkdir open read write lseek close

Ideas to reduce file size:

* (fix alignment on SzAlloc)
* (how to estimate the memory usage from the 7z command-line?)
* Use the lseek64 library call (or _llseek system call) for 64-bit seeks in
  the archive in c-minidiet.sh
* Measure how much slower the new (non-table) CrcCalc is and how much it
  contributes to the total execution time.
* try some more command-line flags for gcc (http://tiny.cc/tinygcc)
* Eliminate multiple calls to Utf16_To_Char in 7zMain.c.
* Reuse the output buffer for Utf16_To_Char.
* (advanced) Don't store LZMA decompressors (once in the upx stub and one
  in Lzma2Dec.c).
* Remove LZMA2? .7z archives by default seem to use LZMA. Why is LZMA2
  better?
* Inline some syscall functions in minidiet/minidiet.c.
* Pick a shorter (but slower) CRC32 implementation. It's compatible.
  http://www.hackersdelight.org/hdcodetxt/crc.c.txt

Ideas already implemented:

* DONE: Use GCC 4.8 or later, it has better -Os support.
* DONE: Replace CrcCalc with a non-table-based implementation.
* DONE: Get rid of lstat, use O_EXCL flag in open.
* DONE: Loop in LookInStream_Read2 many not be needed.
* DONE: Remove unused CrcUpdateT8 and CpuArch.c.
* DONE: Remove redundancy between SetMTime and ConvertFileTimeToString.
* DONE: use a tiny libc with system calls only
* DONE: memcmp is used only for k7zSignature, try to eliminate or inline it
* DONE: strcmp is used only for argv parsing, try to eliminate or inline it
* DONE: add output buffering for stdout (stdio.h messages)
* DONE: eliminate __divdi3 (use __udivdi3 instead) by converting signed
  divisions to unsinged
* DONE: Replace __udivdi3 with a shorter implementation on __i386__ if the
  divisor is 32-bit.
* DONE: Implement __umoddi3 in terms of __udivdi3.
* do we really need __udivdi3, can't we do without them?
* DONE: fwrite() is called only once per file, use write(2) instead
* DONE: use read() instead of fread() for reading: the file reading pattern is
  already buffered well enough: LookToRead_Look_Exact reads 16 kB most of
  the time (large enough buffer)
* DONE: FileInStream_CreateVTable can be eliminated
* DONE: Once we use SZ_SEEK_SET only, we can eliminate ftell, use lseek, and
  fail if seeking wasn't possible.
* DONE: malloc()+free() is used in a predictable way, only 1 malloc/free pair per
  file (probably the filename); we can optimize it by making free() a no-op
  execpt if it's free()ing the last malloc().
  See malloc.log malloc_perfile.log malloc_perfile2.log
  input .7z file size: 10887666 bytes
  big malloc()s: 100192, 466238, 521688, 21810108, 26192641
  The malloc(21810108) happens after the free() of 26192641. Can we optimize it?
  How much is the memory usage, who do we need the big malloc for?
  How does it change if we duplicate all files twice in the .7z?

Should we compress the tiny7zx with LZMA and reuse the LZMA decoder?

* Probably not worth writing, won't be smaller than the state of the art
  tiny7zx.upx.
* Sizes: 
  lzmadec (7z LzmaDec.c) is 7853 bytes
  -rw-r----- 1 pts eng 14070 Feb  2 08:48 tiny7zx.7z
  -rwxr-x--- 1 pts eng 47488 Jan 19  2014 tiny7zx.dynamic
  -rw-r----- 1 pts eng 14373 Feb  2 08:48 tiny7zx.lzma
  -rwxr-xr-x 1 pts eng 24396 Feb  1 17:35 tiny7zx.unc
  -rwxr-xr-x 1 pts eng 16640 Feb  1 17:35 tiny7zx.upx
  -rwxr-xr-x 1 pts eng 18424 Feb  1 17:35 tiny7zx.upx_lzma
  -rwxr-x--- 1 pts eng 32208 Jan 19  2014 tiny7zx.xstatic
  -rw-r----- 1 pts eng 14392 Feb  2 08:48 tiny7zx.xz
  -rw-r----- 1 pts eng 14384 Feb  2 08:47 tiny7zx.xz7z
* Estimated size of the LZMA decoder (LzmaDec.c): 7600 bytes.
* Estimated size of the ELF stub running the LZMA decoder: 300 bytes.
* Estimated size of tiny7zx.unc without the LZMA decoder: 24400 - 7400 == 17000 bytes.
* Estimated size of tiny7zx.lzma without the LZMA decoder: 17000 * (14400 / 24400) = 10000 bytes.
* Estimated size of the output ELF: 7600 + 300 + 10000 == 17900 bytes.
* ... So probably not worth writing, because tiny7zx.upx is already 16640 bytes.

__END__
